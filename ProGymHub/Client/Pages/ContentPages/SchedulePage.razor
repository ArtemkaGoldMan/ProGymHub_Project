@page "/schedule"
@using BaseLibrary.DTOs
@using BaseLibrary.Responses
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<link href="css/Schedule.css" rel="stylesheet" />

<div class="container">
    <h3 class="text-center my-4">Weekly Schedule</h3>

    @if (lessons == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!lessons.Any())
    {
        <p>No lessons available.</p>
    }
    else
    {
        <div class="schedule-container">
            <div class="hour-labels">
                @for (var hour = 8; hour <= 20; hour++)
                {
                    var displayHour = hour <= 12 ? hour : hour - 12;
                    var period = hour < 12 ? "AM" : "PM";
                    <div class="hour-label">@displayHour:00 @period</div>
                }
            </div>
            <div class="schedule-grid">
                @foreach (var day in Enum.GetValues(typeof(DayOfWeek)).Cast<DayOfWeek>())
                {
                    <div class="day-column">
                        <h5 class="text-center">@day</h5>
                        @foreach (var lesson in lessons.Where(l => l.Day == day))
                        {
                            <div class="lesson-box" style="@GetLessonStyle(lesson)">
                                @lesson.Name
                                <div class="lesson-times">@lesson.StartTime.ToString(@"hh\:mm") - @lesson.EndTime.ToString(@"hh\:mm")</div>
                            </div>
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private List<LessonDTO>? lessons;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserLessons();
    }

    private async Task LoadUserLessons()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                var userIdClaim = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;
                if (userIdClaim != null && int.TryParse(userIdClaim, out int userId))
                {
                    var client = HttpClientFactory.CreateClient("SystemApiClient");
                    var userLessons = await client.GetFromJsonAsync<List<UserLessonDTO>>($"api/lesson/my-lessons/{userId}");
                    lessons = userLessons.Select(ul => ul.Lesson!).ToList();
                    Console.WriteLine($"Fetched {lessons.Count} user lessons for user ID {userId}.");
                }
                else
                {
                    lessons = new List<LessonDTO>(); // No valid user ID found
                    Console.WriteLine("No valid user ID found.");
                }
            }
            else
            {
                Navigation.NavigateTo("/identity/account/login");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching user lessons: {ex.Message}");
        }
    }

    private string GetLessonStyle(LessonDTO lesson)
    {
        var startHour = lesson.StartTime.Hours;
        var endHour = lesson.EndTime.Hours;
        var startMinute = lesson.StartTime.Minutes;
        var endMinute = lesson.EndTime.Minutes;

        var startInMinutes = (startHour - 8) * 60 + startMinute;
        var endInMinutes = (endHour - 8) * 60 + endMinute;

        var top = startInMinutes / 720.0 * 100; // 720 = 12 hours * 60 minutes
        var height = (endInMinutes - startInMinutes) / 720.0 * 100;

        return $"top: {top}%; height: {height}%;";
    }
}

<style>
    .schedule-container {
        display: flex;
        position: relative;
        height: 960px; /* 12 hours x 60 minutes + padding */
    }

    .hour-labels {
        width: 60px;
        padding-top: 20px; /* Add padding to align the top hour */
        border-right: 1px solid #ddd;
        position: absolute;
        top: 0;
        left: 0;
        height: 100%;
    }

    .hour-label {
        height: 70px; /* 60px + padding */
        border-bottom: 1px solid #ddd;
        text-align: right;
        padding-right: 5px;
        box-sizing: border-box;
    }

    .schedule-grid {
        display: flex;
        justify-content: space-between;
        border: 1px solid #ddd;
        height: 100%; /* Match the height of the container */
        flex-grow: 1;
        margin-left: 60px; /* Same width as hour labels */
    }

    .day-column {
        flex: 1;
        border-left: 1px solid #ddd;
        position: relative;
    }

        .day-column:first-child {
            border-left: none;
        }

        .day-column h5 {
            margin: 0;
            padding: 10px;
            background-color: #f8f9fa;
            border-bottom: 1px solid #ddd;
            text-align: center;
            position: sticky;
            top: 0;
            z-index: 1;
        }

    .lesson-box {
        position: absolute;
        left: 10%;
        right: 10%;
        background-color: #ffc107;
        color: #fff;
        padding: 5px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
        border-radius: 4px;
        text-align: center;
    }

    .lesson-times {
        font-size: 0.8em;
        margin-top: 5px;
    }
</style>

