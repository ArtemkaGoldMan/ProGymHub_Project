@page "/identity/account/login"
@using Client.Pages.OtherPages
@using Syncfusion.Blazor.Popups
@layout AuthenticationLayout
@inject SfDialogService DialogService

<div class="container">
    <div class="row justify-content-center">
        <div class="col-lg-4">
            <EditForm Model="@User" OnValidSubmit="@HandleLogin">
                <DataAnnotationsValidator />
                <div class="card bg-dark text-white" style="opacity: 0.85; margin-top: 20%; border-radius: 10px;">
                    <div class="card-header text-center fs-5">Login</div>
                    <div class="card-body">
                        <div class="form-group mt-3">
                            <label class="form-label">Email</label>
                            <InputText @bind-Value="User.Email" class="form-control"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            <label class="form-label">Password</label>
                            <InputText @bind-Value="User.Password" type="password" class="form-control"></InputText>
                        </div>
                        <div class="form-group mt-3">
                            @if (ShowLoadingButton)
                            {
                                <ButtonLoadingSpinner></ButtonLoadingSpinner>
                            }
                            else
                            {
                                <button class="btn btn-primary float-end" type="submit">Login</button>
                            }
                        </div>
                    </div>
                    <div class="card-footer text-center">
                        Don't have an account?
                        <a class="btn-link" href="/identity/account/register">Sign Up</a>
                    </div>
                    <ValidationSummary />
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    public bool ShowLoadingButton { get; set; } = false;
    Login User = new();

    [CascadingParameter] public Task<AuthenticationState>? AuthenticationState { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await CheckUserAuthentication();
    }

    async Task HandleLogin()
    {
        ShowLoadingButton = true;

        var result = await accountSevice.SignInAsync(User);
        if (result.Flag)
        {
            await DisplayDialog(result.Message, "Login Success");
            var customAuthStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await customAuthStateProvider.UpdateAuthenticationState(new UserSession()
                { Token = result.Token, RefreshToken = result.RefreshToken });
            NavManager.NavigateTo("/", forceLoad: true);
        }
        else
        {
            await DisplayDialog(result.Message, "Alert");
        }

        ShowLoadingButton = false;
    }

    private async Task DisplayDialog(string content, string title)
    {
        await DialogService.AlertAsync(content, title);
    }

    private async Task CheckUserAuthentication()
    {
        if (AuthenticationState != null)
        {
            var user = (await AuthenticationState).User;
            bool isUserAuthenticated = user.Identity?.IsAuthenticated ?? false;
            if (isUserAuthenticated)
                NavManager.NavigateTo("/home/dashboard");
        }
    }
}
