@page "/alesson"
@using BaseLibrary.DTOs
@using BaseLibrary.Responses
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="container">
    <h3 class="text-center my-4">Manage Lessons</h3>

    <div class="mb-3 text-center">
        <button class="btn btn-success" @onclick="ShowAddLessonForm">Add New Lesson</button>
    </div>

    @if (showAddLessonForm)
    {
        <EditForm Model="@newLesson" OnValidSubmit="@AddLesson">
            <DataAnnotationsValidator />
            <div class="card bg-light text-dark mb-3">
                <div class="card-header">Add New Lesson</div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <InputText @bind-Value="newLesson.Name" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputText @bind-Value="newLesson.Description" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Image URL</label>
                        <InputText @bind-Value="newLesson.ImageUrl" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Date</label>
                        <InputDate @bind-Value="newLesson.Date" class="form-control" />
                    </div>
                    <button type="submit" class="btn btn-success">Add Lesson</button>
                    <button type="button" class="btn btn-secondary" @onclick="HideAddLessonForm">Cancel</button>
                </div>
            </div>
        </EditForm>
    }

    @if (lessons == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (!lessons.Any())
    {
        <p>No lessons available.</p>
    }
    else
    {
        <div class="row">
            @foreach (var lesson in lessons)
            {
                <div class="col-md-4 mb-4">
                    <div class="card">
                        <img src="@GetImageUrl(lesson.ImageUrl)" class="card-img-top" alt="@lesson.Name" />
                        <div class="card-body">
                            <h5 class="card-title">@lesson.Name</h5>
                            <p class="card-text">@lesson.Description.Substring(0, Math.Min(lesson.Description.Length, 100))...</p>
                            <p class="card-text"><small class="text-muted">@lesson.Date.ToString("yyyy-MM-dd")</small></p>

                            <button class="btn btn-primary me-2" @onclick="() => ShowUpdateLessonForm(lesson)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => DeleteLesson(lesson.Id)">Delete</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }

    @if (showUpdateLessonForm)
    {
        <EditForm Model="@selectedLesson" OnValidSubmit="@UpdateLesson">
            <DataAnnotationsValidator />
            <div class="card bg-light text-dark mb-3">
                <div class="card-header">Update Lesson</div>
                <div class="card-body">
                    <div class="mb-3">
                        <label class="form-label">Name</label>
                        <InputText @bind-Value="selectedLesson.Name" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Description</label>
                        <InputText @bind-Value="selectedLesson.Description" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Image URL</label>
                        <InputText @bind-Value="selectedLesson.ImageUrl" class="form-control" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Date</label>
                        <InputDate @bind-Value="selectedLesson.Date" class="form-control" />
                    </div>
                    <button type="submit" class="btn btn-primary">Update Lesson</button>
                    <button type="button" class="btn btn-secondary" @onclick="HideUpdateLessonForm">Cancel</button>
                </div>
            </div>
        </EditForm>
    }
</div>

@code {
    private List<LessonDTO>? lessons;
    private LessonDTO newLesson = new LessonDTO();
    private LessonDTO selectedLesson = new LessonDTO();
    private bool showAddLessonForm = false;
    private bool showUpdateLessonForm = false;
    private string defaultImageUrl = "/Images/lesssonsPictures/NoPicture.png";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            if (user.IsInRole("Admin"))
            {
                await LoadAllLessons();
            }
            else
            {
                Navigation.NavigateTo("/user-lessons");
            }
        }
        else
        {
            Navigation.NavigateTo("/identity/account/login");
        }
    }

    private async Task LoadAllLessons()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("SystemApiClient");
            lessons = await client.GetFromJsonAsync<List<LessonDTO>>("api/lesson");
            Console.WriteLine($"Fetched {lessons?.Count ?? 0} lessons.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching all lessons: {ex.Message}");
        }
    }

    private string GetImageUrl(string? imageUrl)
    {
        return string.IsNullOrEmpty(imageUrl) ? defaultImageUrl : imageUrl;
    }

    private void ShowAddLessonForm()
    {
        showAddLessonForm = true;
    }

    private void HideAddLessonForm()
    {
        showAddLessonForm = false;
    }

    private async Task AddLesson()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("SystemApiClient");
            var response = await client.PostAsJsonAsync("api/lesson/create", newLesson);
            var result = await response.Content.ReadFromJsonAsync<GeneralResponse>();

            if (result != null && result.Flag)
            {
                newLesson = new LessonDTO();
                showAddLessonForm = false;
                await LoadAllLessons();
            }
            else
            {
                Console.WriteLine($"Error adding lesson: {result?.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding lesson: {ex.Message}");
        }
    }

    private void ShowUpdateLessonForm(LessonDTO lesson)
    {
        selectedLesson = lesson;
        showUpdateLessonForm = true;
    }

    private void HideUpdateLessonForm()
    {
        showUpdateLessonForm = false;
    }

    private async Task UpdateLesson()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("SystemApiClient");
            var response = await client.PutAsJsonAsync($"api/lesson/update/{selectedLesson.Id}", selectedLesson);
            var result = await response.Content.ReadFromJsonAsync<GeneralResponse>();

            if (result != null && result.Flag)
            {
                selectedLesson = new LessonDTO();
                showUpdateLessonForm = false;
                await LoadAllLessons();
            }
            else
            {
                Console.WriteLine($"Error updating lesson: {result?.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating lesson: {ex.Message}");
        }
    }

    private async Task DeleteLesson(int lessonId)
    {
        try
        {
            var client = HttpClientFactory.CreateClient("SystemApiClient");
            var response = await client.DeleteAsync($"api/lesson/delete/{lessonId}");
            var result = await response.Content.ReadFromJsonAsync<GeneralResponse>();

            if (result != null && result.Flag)
            {
                await LoadAllLessons();
            }
            else
            {
                Console.WriteLine($"Error deleting lesson: {result?.Message}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting lesson: {ex.Message}");
        }
    }
}